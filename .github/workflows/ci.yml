name: a3to9e

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(aria2c,curl,axel,wget)'
         required: true
         default: 'aria2c'
       output:
         description: 'Output(wget=O)'
         required: true
         default: 'o'
       filename:
         description: 'ROM NAME'
         required: true
         default: 'xx.zip'
       filelink:
         description: 'ROM LINK'
         required: true
       release:
         description: 'Upload to Release'
         required: true
         default: 'true'

jobs:
  a3to9e:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel cpio
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          NAME="${{ github.event.inputs.filename }}"
          if [[ ! -z "$(echo ${NAME} | grep ".zip")" ]]; then
              echo "::set-output name=filename::${NAME%.*}"
              filename="${NAME%.*}"
          fi
          ${{ github.event.inputs.mode }} ${{ github.event.inputs.filelink }} -${{ github.event.inputs.output }} "${filename}.zip"
          ls -al

      - name: Extracting Payload 
        run: |
          echo "Payload Extracting"
          unzip ${{ steps.var.outputs.filename }}.zip
          rm -rf ${{ steps.var.outputs.filename }}.zip
          python3 update-payload-extractor/extract.py payload.bin --output_dir ./output/
          ls output/

      - name: Patching fstabs
        run: |
            echo "vendor"
            mkdir vendor/
            sudo mount output/vendor.img vendor/
            cat vendor/etc/fstab.qcom
            fstab="vendor/etc/fstab.qcom"
            sudo sed -i 's/,slotselect//g' $fstab
            sudo sed -i 's/,verify//g' $fstab
            sudo sed -i 's/,avb//g' $fstab
            sudo sed -i 's/forceencrypt/encryptable/g' $fstab
            sudo sed -i 's/fileencryption=ice/encryptable=footer/g' $fstab
            sudo sed -i '/mnt_point/a\/dev/block/bootdevice/by-name/cache                     /cache                   ext4    nosuid,noatime,nodev,barrier=1                       wait' $fstab
            cat vendor/etc/fstab.qcom
            sudo cp vendor/etc/fstab.qcom output/fstab.qcom
            sudo umount vendor
            sudo rm -rf vendor

      - name: Mkbootimg
        run: |
          echo "mkbooting"
          mv output/boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          cat img_info
          sed -i 's/androidboot.vbmeta.avb_version=...//g' img_info
          cat img_info
          cp img_info ../../output/
          ls -al
          cd ..
          ./mkboot boot boot.img
          ls -al
          mv boot.img ../output/
          cd ..

      - name: Mkdtimg
        continue-on-error: true
        run: |
          echo "mkdting"
          mv output/dtbo.img dtbo2dts/
          cd dtbo2dts
          python dtbo2dtsi.py
          rm dtbo.img
          ls -al
          line="$(grep -n "vbmeta" dtsi.0)"
          linea="$(echo $line | cut -d ":" -f 1)"
          lineb="`expr $linea + 24`""p"
          echo $linea
          echo $lineb
          sed -n "$linea,$lineb" dtsi.*
          #sed -i '/parts/{n;d;}' dtsi.*
          #sed -i '/parts/{n;d;}' dtsi.*
          #sed -i '/vbmeta/d' dtsi.*
          #sed -i '/android,vbmeta/d' dtsi.*
          #sed -i '/parts/d' dtsi.*
          sed -i 's/,slotselect//g' dtsi.*
          sed -i 's/,avb//g' dtsi.*
          sed -n "$linea,$lineb" dtsi.*
          cp dtsi.* ../output/
          python dtsi2dtbo.py
          cp dtb_tmp.* ../output/
          ls -al
          cp dtbo_new.img ../output/dtbo.img
          cd ../../
          
      - name: MakeMeSAR
        run: |
          mkdir tmp
          mv output/boot.img tmp/
          cd tmp
          ../magiskboot unpack -h boot.img
          rm -f ramdisk.cpio
          ls
          ../magiskboot repack boot.img
          ls -al
          cd ..
          mv tmp/new-boot.img output/boot.img

      - name: Patching vbmeta
        run: |
          echo "patching vbmeta"
          ls output
          ./magiskboot --help
          xxd -c 256 -u output/vbmeta.img | grep "0000 0000 0000 0000 6176 6274" > /dev/null 2>&1
          echo $?
          if [ $? -eq 0 ]; then
              echo "Hex match!!"
              echo "Patching vbmeta..."
              ./magiskboot hexpatch output/vbmeta.img 000000000000000061766274 000000020000000061766274
              echo "Success!!!"
          else
              echo "TEST FAILED"
              echo "Testing Another Method"
              ./magiskboot hexpatch output/vbmeta.img 000000030000000061766274 000000020000000061766274
          fi
          od -w16 -An -tx1 output/vbmeta.img

      - name: Packing
        run: |
          mv output/boot.img template/boot.img
          mv output/system.img template/system.img
          mv output/vendor.img template/vendor.img
          mv output/dtbo.img template/dtbo.img
          mv output/vbmeta.img template/vbmeta.img
          cd template
          ls -al
          echo "--------------------------------------------"
          zip -q -r -9 ${{ steps.var.outputs.filename }}.zip *
          cd ..
          mv template/${{ steps.var.outputs.filename }}.zip ./
          ls -al

      - name: Upload to Artifact
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7

      - name: Upload to WeTransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          wetrans=$(./transfer wet -s -p 16 --no-progress ${{ steps.var.outputs.filename }}.zip)
          wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
          echo "WeTransfer: $wetrans"

      - name: Upload to Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.var.outputs.filename }}.zip
          name: ${{ steps.var.outputs.filename }}
          tag_name: ${{ github.run_id }}
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}

